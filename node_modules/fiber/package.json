{
  "_from": "fiber",
  "_id": "fiber@1.0.4",
  "_inBundle": false,
  "_integrity": "sha1-aZ6cWBcdaFsaNpyY10M5aRMzKN4=",
  "_location": "/fiber",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "fiber",
    "fetchSpec": "latest",
    "name": "fiber",
    "raw": "fiber",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/fiber/-/fiber-1.0.4.tgz",
  "_shasum": "699e9c58171d685b1a369c98d7433969133328de",
  "_spec": "fiber",
  "_where": "C:\\Users\\serji\\GIT",
  "author": {
    "email": "kirollos@gmail.com",
    "name": "Kirollos Risk"
  },
  "bugs": {
    "url": "https://github.com/linkedin/Fiber/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Lightweight JavaScript inheritance library",
  "devDependencies": {
    "vows": "0.6.x"
  },
  "engines": {
    "node": ">= 0.4"
  },
  "homepage": "https://github.com/linkedin/Fiber",
  "main": "./src/fiber.js",
  "name": "fiber",
  "optionalDependencies": {},
  "readme": "# Fiber.js: Lightweight, fast, JavaScript inheritance model\n\n[![Build Status](https://secure.travis-ci.org/linkedin/Fiber.png?branch=master)](http://travis-ci.org/linkedin/Fiber)\n\n## Why another JavaScript inheritance library?\n\nTake a look at the [performance tests](http://jsperf.com/js-inheritance-performance) to see how it compares against commonly used inheritance libraries.\n\n## Inheritance\n\n### Usage\n\n`[[constructor]].extend( function )`\n\n#### Example\n\n```javascript\n// Animal base class\nvar Animal = Fiber.extend(function() {\n    return {\n        // The `init` method serves as the constructor.\n        init: function() {\n            // Private\n            function private1(){}\n            function private2(){}\n\n            // Privileged\n            this.privileged1 = function(){}\n            this.privileged2 = function(){}\n        },\n        // Public\n        method1: function(){}\n    }\n});\n```\n\nThe `init` method acts as the constructor, which is invoked when an instance is created:\n\n```javascript\nvar animal = new Animal(); // Create a new Animal instance\n```\n\n`init` is invoked automatically.\n\n### Inheritance\n\n```javascript\n// Extend the Animal class.\nvar Dog = Animal.extend(function() {\n    return {\n        // Override base class `method1`\n        method1: function(){\n            console.log('dog::method1');\n        },\n        scare: function(){\n            console.log('Dog::I scare you');\n        }\n    }\n});\n```\n\nCreate an instance of `Dog`:\n\n```javascript\nvar husky = new Dog();\nhusky.scare(); // \"Dog::I scare you'\"\n```\n\n#### Accessing parent prototype\n\nEvery class definition has access to the parent's prototype via the first argument passed into the function:\n\n```javascript\n// Extend the Animal class.\nvar Dog = Animal.extend(function( base ) {\n    return {\n        // Override base class `method1`\n        method1: function(){\n            // Call the parent method\n            base.method1.call(this);\n        },\n        scare: function(){\n            console.log('Dog::I scare you');\n        }\n    }\n});\n```\n\n## Mixin\n\nMixins are a way to add functionality to a Fiber definition.  Basically, they address the problem of \"multiple inheritance\".  [Read more.](http://www.joezimjs.com/javascript/javascript-mixins-functional-inheritance/)\n\n### Usage\n\n`Fiber.mixin( object, function1, function2, ... )`\n\n```javascript\nvar Foo = Fiber.extend(function(base) {\n    return {\n        method1: function(){}\n    }\n});\n\nvar f = new Foo();\nf.method1();\n\nvar mix1 = function(base) {\n    return  {\n        method2: function() {}\n    }\n}\n\nFiber.mixin(Foo, mix1);\n\nf.method2();\n```\n\n## Decorators\n\nWith decorators you can dynamically attach additional properties to an instance.  [Read more.](http://en.wikipedia.org/wiki/Decorator_pattern)\n\n### Usage\n\n`Fiber.decorate( instance, decorator_1, ... , decorator_n )`\n\n```javascript\nfunction CarWithPowerWindows(base) {\n    return {\n        roll: function() {}\n    }\n}\n\nFiber.decorate(myCar, CarWithPowerWindows);\n```\n\n## Proxy\n\n### Usage\n\n`Fiber.proxy( base, instance )`\n\n```javascript\n// Extend the Animal class;\nvar Dog = Animal.extend(function(base) {\n    return {\n        init: function() {\n            this.base = Fiber.proxy(base, this);\n            this.base.init();\n        }\n    }\n});\n```\n\n## noConflict\n\n### Usage\n\n`Fiber.noConflict()`\n\nReturns a reference to the Fiber object, and sets the `Fiber` variable to its previous owner.\n\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/linkedin/Fiber.git"
  },
  "scripts": {
    "test": "vows --spec"
  },
  "version": "1.0.4"
}
